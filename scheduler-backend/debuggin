/**
 * Emergency backup method to update campaign using direct JDBC
 * This bypasses all JPA/Hibernate issues and reduces frequency and display capping
 */
 @Autowired
 private JdbcTemplate jdbcTemplate;
 
 private boolean emergencyUpdateCampaign(String campaignId, Date currentDate) {
     try {
         log.info("Attempting emergency direct JDBC update for campaign ID: {}", campaignId);
         
         // First, get the current values from the database
         String selectSql = "SELECT frequency_per_week, display_capping, original_frequency_per_week FROM campaigns WHERE id = ?";
         
         Map<String, Object> currentValues = jdbcTemplate.queryForMap(selectSql, campaignId);
         
         Integer frequencyPerWeek = (Integer) currentValues.get("frequency_per_week");
         Integer displayCapping = (Integer) currentValues.get("display_capping");
         Integer originalFrequency = (Integer) currentValues.get("original_frequency_per_week");
         
         // Decrement counters safely
         Integer newFrequency = frequencyPerWeek != null ? Math.max(0, frequencyPerWeek - 1) : null;
         Integer newCapping = displayCapping != null ? Math.max(0, displayCapping - 1) : null;
         
         // Determine visibility
         String visibility = (newCapping != null && newCapping <= 0) ? "COMPLETED" : "VISIBLE";
         
         // Determine rotation status
         String rotationStatus = null;
         if (newFrequency != null && newCapping != null && newFrequency <= 0 && newCapping > 0) {
             rotationStatus = "ROTATED_RECENTLY";
         }
         
         // If original frequency is not set but we have a current frequency value, set it
         if (originalFrequency == null && frequencyPerWeek != null) {
             jdbcTemplate.update(
                 "UPDATE campaigns SET original_frequency_per_week = ? WHERE id = ?",
                 frequencyPerWeek, campaignId
             );
         }
         
         // Update all relevant fields in one transaction
         String updateSql = "UPDATE campaigns SET " +
                 "frequency_per_week = ?, " +
                 "display_capping = ?, " +
                 "visibility = ?, " +
                 "rotation_status = ?, " +
                 "updated_date = ?, " +
                 "requested_date = ? " +
                 "WHERE id = ?";
         
         int rows = jdbcTemplate.update(
             updateSql, 
             newFrequency, 
             newCapping, 
             visibility, 
             rotationStatus, 
             new Timestamp(currentDate.getTime()), 
             new Timestamp(currentDate.getTime()), 
             campaignId
         );
         
         log.info("Emergency update affected {} rows. New frequency: {}, new capping: {}, visibility: {}", 
                 rows, newFrequency, newCapping, visibility);
         return rows > 0;
     } catch (Exception e) {
         log.error("Emergency update failed: {}", e.getMessage(), e);
         return false;
     }
 }







 @Transactional
public CampaignResponseDTO getNextEligibleCampaign(String requestDate, String companyId) 
        throws DataHandlingException {
    try {
        // Convert date format
        String formattedDate = rotationUtils.convertDate(requestDate);
        Date currentDate = rotationUtils.getinDate(formattedDate);
        
        // Get all eligible campaigns for the company using the join query
        List<CampaignMapping> eligibleCampaigns = campaignRepository
                .getEligibleCampaignsForCompany(formattedDate, companyId);
        
        if (eligibleCampaigns.isEmpty()) {
            throw new DataHandlingException(HttpStatus.OK.toString(),
                    "No eligible campaigns found for the company");
        }
        
        log.info("Found {} eligible campaigns for company {} on date {}", 
                eligibleCampaigns.size(), companyId, formattedDate);
        
        // Apply rotation logic to select the next campaign
        CampaignMapping selectedCampaign = selectNextCampaignForRotation(eligibleCampaigns, currentDate);
        
        // Try emergency update
        emergencyUpdateCampaign(selectedCampaign.getId(), currentDate);
        
        // Get a fresh copy of the campaign
        CampaignMapping refreshedCampaign = campaignRepository.findById(selectedCampaign.getId())
                .orElse(selectedCampaign);
        
        // Generate response DTO
        return campaignService.mapToDTOWithCompanies(refreshedCampaign);
    } catch (DataHandlingException e) {
        throw e;
    } catch (Exception e) {
        log.error("Unexpected error in getNextEligibleCampaign: {}", e.getMessage(), e);
        throw new DataHandlingException(HttpStatus.INTERNAL_SERVER_ERROR.toString(),
                "Unexpected error: " + e.getMessage());
    }
}











import org.springframework.jdbc.core.JdbcTemplate;
import java.sql.Timestamp;

// Then in your class
@Autowired
private JdbcTemplate jdbcTemplate;





// Skip update entirely for testing
CampaignMapping selectedCampaign = selectNextCampaignForRotation(eligibleCampaigns, currentDate);
return campaignService.mapToDTOWithCompanies(selectedCampaign);



